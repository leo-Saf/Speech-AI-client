{"ast":null,"code":"import 'dotenv/config';\nimport express from 'express';\nimport multer from 'multer';\nimport speech from '@google-cloud/speech';\nimport { TextToSpeechClient } from '@google-cloud/text-to-speech';\nimport OpenAI from 'openai';\nimport fs from 'fs';\nimport ffmpeg from 'fluent-ffmpeg';\nimport ffmpegPath from 'ffmpeg-static';\nimport cors from 'cors';\nffmpeg.setFfmpegPath(ffmpegPath);\nconst app = express();\napp.use(cors());\nconst upload = multer();\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\nconst ttsClient = new TextToSpeechClient();\nconst speechClient = new speech.SpeechClient({\n  keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS\n});\napp.post('/api/process-audio', upload.single('audio'), async (req, res) => {\n  const tempAudioPath = 'temp_audio.webm';\n  const convertedAudioPath = 'converted_audio.wav';\n\n  // Hämta språkkoden från förfrågan, med ett standardvärde\n  const languageCode = req.body.language || 'sv-SE'; // Använd svenska som standard om ingen språkkod anges\n\n  try {\n    // Kontrollera om filen finns i förfrågan\n    if (!req.file) {\n      throw new Error('Ingen ljudfil mottogs.');\n    }\n\n    // Spara den mottagna ljudfilen\n    console.log('Sparar temporär ljudfil...');\n    fs.writeFileSync(tempAudioPath, req.file.buffer);\n\n    // Konvertera ljudfilen från webm till wav\n    console.log('Konverterar ljudfil...');\n    await new Promise((resolve, reject) => {\n      ffmpeg(tempAudioPath).output(convertedAudioPath).audioCodec('pcm_s16le').audioFrequency(16000) // Ställ in samplingsfrekvensen till 16 kHz\n      .format('wav').on('end', resolve).on('error', err => {\n        console.error('Fel vid konvertering av ljudfil:', err);\n        reject(err);\n      }).run();\n    });\n\n    // Läs in den konverterade ljudfilen\n    const audioBytes = fs.readFileSync(convertedAudioPath).toString('base64');\n\n    // Skicka till Google Speech-to-Text\n    console.log('Skickar ljudfil till Google Speech-to-Text API...');\n    const [speechResponse] = await speechClient.recognize({\n      audio: {\n        content: audioBytes\n      },\n      config: {\n        encoding: 'LINEAR16',\n        sampleRateHertz: 16000,\n        // Se till att detta matchar den faktiska samplingsfrekvensen\n        languageCode: languageCode // Använd språkkoden från klienten\n      }\n    });\n    const transcription = speechResponse.results.map(result => result.alternatives[0].transcript).join('\\n');\n    console.log('Transkription:', transcription);\n\n    // Skicka transkriptionen till OpenAI\n    console.log('Skickar transkriptionen till GPT-4...');\n    const chatResponse = await openai.chat.completions.create({\n      messages: [{\n        role: 'user',\n        content: transcription\n      }],\n      model: 'gpt-4',\n      language: languageCode // Ställ in språkkod här\n    });\n    const replyText = chatResponse.choices[0].message.content;\n    console.log('GPT-4 Svar:', replyText);\n\n    // Konvertera svaret till tal med Google Text-to-Speech\n    console.log('Konverterar GPT-4-svaret till tal med Google Text-to-Speech...');\n    const [ttsResponse] = await ttsClient.synthesizeSpeech({\n      input: {\n        text: replyText\n      },\n      voice: {\n        languageCode: languageCode,\n        // Använd språkkoden för TTS\n        ssmlGender: 'NEUTRAL'\n      },\n      audioConfig: {\n        audioEncoding: 'MP3'\n      } // Du kan använda 'MP3' eller 'OGG_OPUS'\n    });\n\n    // Sätt rätt Content-Type och skicka ljudet tillbaka\n    res.set('Content-Type', 'audio/mp3');\n    res.send(ttsResponse.audioContent);\n  } catch (error) {\n    console.error('Fel vid bearbetning:', error.message);\n    console.error('Fullständig stack:', error.stack);\n    res.status(500).send(`Serverfel: ${error.message}`);\n  } finally {\n    // Rensa upp temporära filer\n    if (fs.existsSync(tempAudioPath)) {\n      fs.unlinkSync(tempAudioPath);\n    }\n    if (fs.existsSync(convertedAudioPath)) {\n      fs.unlinkSync(convertedAudioPath);\n    }\n  }\n});\napp.listen(3000, () => {\n  console.log('Servern körs på port 3000');\n});","map":{"version":3,"names":["express","multer","speech","TextToSpeechClient","OpenAI","fs","ffmpeg","ffmpegPath","cors","setFfmpegPath","app","use","upload","openai","apiKey","process","env","OPENAI_API_KEY","ttsClient","speechClient","SpeechClient","keyFilename","GOOGLE_APPLICATION_CREDENTIALS","post","single","req","res","tempAudioPath","convertedAudioPath","languageCode","body","language","file","Error","console","log","writeFileSync","buffer","Promise","resolve","reject","output","audioCodec","audioFrequency","format","on","err","error","run","audioBytes","readFileSync","toString","speechResponse","recognize","audio","content","config","encoding","sampleRateHertz","transcription","results","map","result","alternatives","transcript","join","chatResponse","chat","completions","create","messages","role","model","replyText","choices","message","ttsResponse","synthesizeSpeech","input","text","voice","ssmlGender","audioConfig","audioEncoding","set","send","audioContent","stack","status","existsSync","unlinkSync","listen"],"sources":["/Users/hasansafiah/Desktop/speech-AI-projekt test/frontend/src/components/AudioUploader.js"],"sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport multer from 'multer';\nimport speech from '@google-cloud/speech';\nimport { TextToSpeechClient } from '@google-cloud/text-to-speech';\nimport OpenAI from 'openai';\nimport fs from 'fs';\nimport ffmpeg from 'fluent-ffmpeg';\nimport ffmpegPath from 'ffmpeg-static';\nimport cors from 'cors';\n\nffmpeg.setFfmpegPath(ffmpegPath);\n\nconst app = express();\napp.use(cors());\nconst upload = multer();\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst ttsClient = new TextToSpeechClient();\nconst speechClient = new speech.SpeechClient({\n  keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS,\n});\n\napp.post('/api/process-audio', upload.single('audio'), async (req, res) => {\n  const tempAudioPath = 'temp_audio.webm';\n  const convertedAudioPath = 'converted_audio.wav';\n\n  // Hämta språkkoden från förfrågan, med ett standardvärde\n  const languageCode = req.body.language || 'sv-SE'; // Använd svenska som standard om ingen språkkod anges\n\n  try {\n    // Kontrollera om filen finns i förfrågan\n    if (!req.file) {\n      throw new Error('Ingen ljudfil mottogs.');\n    }\n\n    // Spara den mottagna ljudfilen\n    console.log('Sparar temporär ljudfil...');\n    fs.writeFileSync(tempAudioPath, req.file.buffer);\n\n    // Konvertera ljudfilen från webm till wav\n    console.log('Konverterar ljudfil...');\n    await new Promise((resolve, reject) => {\n      ffmpeg(tempAudioPath)\n        .output(convertedAudioPath)\n        .audioCodec('pcm_s16le')\n        .audioFrequency(16000) // Ställ in samplingsfrekvensen till 16 kHz\n        .format('wav')\n        .on('end', resolve)\n        .on('error', (err) => {\n          console.error('Fel vid konvertering av ljudfil:', err);\n          reject(err);\n        })\n        .run();\n    });\n\n    // Läs in den konverterade ljudfilen\n    const audioBytes = fs.readFileSync(convertedAudioPath).toString('base64');\n\n    // Skicka till Google Speech-to-Text\n    console.log('Skickar ljudfil till Google Speech-to-Text API...');\n    const [speechResponse] = await speechClient.recognize({\n      audio: { content: audioBytes },\n      config: {\n        encoding: 'LINEAR16',\n        sampleRateHertz: 16000, // Se till att detta matchar den faktiska samplingsfrekvensen\n        languageCode: languageCode, // Använd språkkoden från klienten\n      },\n    });\n\n    const transcription = speechResponse.results\n      .map(result => result.alternatives[0].transcript)\n      .join('\\n');\n\n    console.log('Transkription:', transcription);\n\n    // Skicka transkriptionen till OpenAI\n    console.log('Skickar transkriptionen till GPT-4...');\n    const chatResponse = await openai.chat.completions.create({\n      messages: [{ role: 'user', content: transcription }],\n      model: 'gpt-4',\n      language: languageCode, // Ställ in språkkod här\n    });\n\n    const replyText = chatResponse.choices[0].message.content;\n    console.log('GPT-4 Svar:', replyText);\n\n    // Konvertera svaret till tal med Google Text-to-Speech\n    console.log('Konverterar GPT-4-svaret till tal med Google Text-to-Speech...');\n    const [ttsResponse] = await ttsClient.synthesizeSpeech({\n      input: { text: replyText },\n      voice: {\n        languageCode: languageCode, // Använd språkkoden för TTS\n        ssmlGender: 'NEUTRAL',\n      },\n      audioConfig: { audioEncoding: 'MP3' }, // Du kan använda 'MP3' eller 'OGG_OPUS'\n    });\n\n    // Sätt rätt Content-Type och skicka ljudet tillbaka\n    res.set('Content-Type', 'audio/mp3');\n    res.send(ttsResponse.audioContent);\n  } catch (error) {\n    console.error('Fel vid bearbetning:', error.message);\n    console.error('Fullständig stack:', error.stack);\n    res.status(500).send(`Serverfel: ${error.message}`);\n  } finally {\n    // Rensa upp temporära filer\n    if (fs.existsSync(tempAudioPath)) {\n      fs.unlinkSync(tempAudioPath);\n    }\n    if (fs.existsSync(convertedAudioPath)) {\n      fs.unlinkSync(convertedAudioPath);\n    }\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Servern körs på port 3000');\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}