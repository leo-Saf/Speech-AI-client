{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/speech-AI-projekt test/frontend/src/components/AudioUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { uploadAudio, setLanguage } from '../client'; // Importera nya funktioner från client.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = () => {\n  _s();\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState('sv-SE'); // Standard till svenska\n\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream, {\n          mimeType: 'audio/webm'\n        });\n        setMediaRecorder(recorder);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n    setupRecorder();\n  }, []);\n  const handleLanguageChange = event => {\n    setSelectedLanguage(event.target.value);\n    setLanguage(event.target.value); // Skicka valt språk till backend\n  };\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n    mediaRecorder.start();\n    setIsRecording(true);\n    const audioChunks = [];\n    mediaRecorder.ondataavailable = event => {\n      audioChunks.push(event.data);\n    };\n    mediaRecorder.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/webm'\n      });\n      setAudioBlob(audioBlob);\n      setIsRecording(false);\n      await handleUpload(audioBlob);\n    };\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      mediaRecorder.stop();\n    }\n  };\n  const handleUpload = async blob => {\n    if (!blob) {\n      alert('Vänligen spela in ett ljud först.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const audioBlobResponse = await uploadAudio(blob, selectedLanguage); // Skicka språket i förfrågan\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Spela in ett ljud\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"language-select\",\n      children: \"V\\xE4lj spr\\xE5k:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"language-select\",\n      value: selectedLanguage,\n      onChange: handleLanguageChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"sv-SE\",\n        children: \"Svenska\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"en-US\",\n        children: \"Engelska\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"es-ES\",\n        children: \"Spanska\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: loading,\n      children: \"Starta inspelning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: loading,\n      children: \"Stoppa inspelning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bearbetar ljud...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }, this), responseAudio && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Bearbetat ljud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: responseAudio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioUploader, \"b0ExALDRD1GSdlO5c67L09iKOwY=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","useEffect","uploadAudio","setLanguage","jsxDEV","_jsxDEV","AudioUploader","_s","audioBlob","setAudioBlob","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","responseAudio","setResponseAudio","loading","setLoading","selectedLanguage","setSelectedLanguage","setupRecorder","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","mimeType","error","console","handleLanguageChange","event","target","value","handleStartRecording","start","audioChunks","ondataavailable","push","data","onstop","Blob","type","handleUpload","handleStopRecording","stop","blob","alert","audioBlobResponse","audioURL","URL","createObjectURL","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","onClick","disabled","controls","src","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/speech-AI-projekt test/frontend/src/components/AudioUploader.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { uploadAudio, setLanguage } from '../client'; // Importera nya funktioner från client.js\n\nconst AudioUploader = () => {\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState('sv-SE'); // Standard till svenska\n\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });\n        setMediaRecorder(recorder);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n\n    setupRecorder();\n  }, []);\n\n  const handleLanguageChange = (event) => {\n    setSelectedLanguage(event.target.value);\n    setLanguage(event.target.value); // Skicka valt språk till backend\n  };\n\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n\n    mediaRecorder.start();\n    setIsRecording(true);\n\n    const audioChunks = [];\n    mediaRecorder.ondataavailable = (event) => {\n      audioChunks.push(event.data);\n    };\n\n    mediaRecorder.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n      setAudioBlob(audioBlob);\n      setIsRecording(false);\n\n      await handleUpload(audioBlob);\n    };\n  };\n\n  const handleStopRecording = () => {\n    if (mediaRecorder && isRecording) {\n      mediaRecorder.stop();\n    }\n  };\n\n  const handleUpload = async (blob) => {\n    if (!blob) {\n      alert('Vänligen spela in ett ljud först.');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const audioBlobResponse = await uploadAudio(blob, selectedLanguage); // Skicka språket i förfrågan\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h2>Spela in ett ljud</h2>\n\n      <label htmlFor=\"language-select\">Välj språk:</label>\n      <select id=\"language-select\" value={selectedLanguage} onChange={handleLanguageChange}>\n        <option value=\"sv-SE\">Svenska</option>\n        <option value=\"en-US\">Engelska</option>\n        <option value=\"es-ES\">Spanska</option>\n        {/* Lägg till fler språk här */}\n      </select>\n\n      {!isRecording ? (\n        <button onClick={handleStartRecording} disabled={loading}>\n          Starta inspelning\n        </button>\n      ) : (\n        <button onClick={handleStopRecording} disabled={loading}>\n          Stoppa inspelning\n        </button>\n      )}\n\n      <br />\n      {loading && <p>Bearbetar ljud...</p>}\n\n      {responseAudio && (\n        <div>\n          <h3>Bearbetat ljud</h3>\n          <audio controls src={responseAudio}></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}