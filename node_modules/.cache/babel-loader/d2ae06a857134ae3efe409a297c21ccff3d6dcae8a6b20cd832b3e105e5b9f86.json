{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/speech-AI-projekt test/frontend/src/components/AudioUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunks = useRef([]);\n  const startRecording = () => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunks.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = handleUpload;\n      mediaRecorderRef.current.start();\n      setRecording(true);\n    }).catch(error => {\n      console.error('Error accessing microphone:', error);\n    });\n  };\n  const stopRecording = () => {\n    mediaRecorderRef.current.stop();\n    setRecording(false);\n  };\n  const handleUpload = () => {\n    const audioBlob = new Blob(audioChunks.current, {\n      type: 'audio/webm'\n    });\n    audioChunks.current = []; // Clear the recorded chunks after uploading\n    setAudioUrl(URL.createObjectURL(audioBlob));\n\n    // Create FormData and append the Blob (audioBlob)\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'audio.webm');\n\n    // Send the audio file to the server\n    uploadAudio(formData);\n  };\n  const uploadAudio = async formData => {\n    try {\n      const response = await fetch('http://localhost:3000/api/process-audio', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const audioResponse = await response.blob();\n      const audioUrl = URL.createObjectURL(audioResponse);\n      setAudioUrl(audioUrl);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Audio Recorder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: recording ? stopRecording : startRecording,\n      children: recording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recorded Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioUploader, \"NG4aV5uxajwGJBFdLePZHGCNQ2Y=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","AudioUploader","_s","recording","setRecording","audioUrl","setAudioUrl","mediaRecorderRef","audioChunks","startRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","current","MediaRecorder","ondataavailable","event","push","data","onstop","handleUpload","start","catch","error","console","stopRecording","stop","audioBlob","Blob","type","URL","createObjectURL","formData","FormData","append","uploadAudio","response","fetch","method","body","ok","Error","audioResponse","blob","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","controls","src","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/speech-AI-projekt test/frontend/src/components/AudioUploader.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nconst AudioUploader = () => {\n  const [recording, setRecording] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunks = useRef([]);\n\n  const startRecording = () => {\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then((stream) => {\n        mediaRecorderRef.current = new MediaRecorder(stream);\n        mediaRecorderRef.current.ondataavailable = (event) => {\n          audioChunks.current.push(event.data);\n        };\n        mediaRecorderRef.current.onstop = handleUpload;\n        mediaRecorderRef.current.start();\n        setRecording(true);\n      })\n      .catch((error) => {\n        console.error('Error accessing microphone:', error);\n      });\n  };\n\n  const stopRecording = () => {\n    mediaRecorderRef.current.stop();\n    setRecording(false);\n  };\n\n  const handleUpload = () => {\n    const audioBlob = new Blob(audioChunks.current, { type: 'audio/webm' });\n    audioChunks.current = []; // Clear the recorded chunks after uploading\n    setAudioUrl(URL.createObjectURL(audioBlob));\n\n    // Create FormData and append the Blob (audioBlob)\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'audio.webm');\n\n    // Send the audio file to the server\n    uploadAudio(formData);\n  };\n\n  const uploadAudio = async (formData) => {\n    try {\n      const response = await fetch('http://localhost:3000/api/process-audio', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const audioResponse = await response.blob();\n      const audioUrl = URL.createObjectURL(audioResponse);\n      setAudioUrl(audioUrl);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Audio Recorder</h2>\n      <button onClick={recording ? stopRecording : startRecording}>\n        {recording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      {audioUrl && (\n        <div>\n          <h3>Recorded Audio</h3>\n          <audio controls src={audioUrl}></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}