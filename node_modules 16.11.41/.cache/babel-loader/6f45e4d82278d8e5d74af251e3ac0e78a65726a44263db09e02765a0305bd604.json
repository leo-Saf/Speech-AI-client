{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client';\nimport '../style.css'; // Importera CSS-fil\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioUploader = () => {\n  _s();\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPaused, setIsPaused] = useState(false); // Ny state för att hålla reda på om inspelningen är pausad\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null); // Ref till canvas för vågformsanimation\n  const analyserRef = useRef(null); // Ref till AnalyserNode\n  const audioContextRef = useRef(null); // Ref till AudioContext\n  const microphoneRef = useRef(null); // För att spara mikrofonströmmen\n  const MAX_SILENCE_TIME = 2000; // Tid i millisekunder innan tystnad stoppar inspelningen\n  let silenceTimeout = null; // För att hantera tidsgränsen för tystnad\n  let recordingTimeout = null;\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const options = {\n          mimeType: 'audio/webm'\n        };\n        const recorder = new MediaRecorder(stream, options);\n        setMediaRecorder(recorder);\n\n        // Skapa en AudioContext och AnalyserNode för att läsa ljuddata\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n        analyserRef.current = audioContextRef.current.createAnalyser();\n        analyserRef.current.fftSize = 256; // För upplösning på ljudet\n        microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n        microphoneRef.current.connect(analyserRef.current);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n    setupRecorder();\n  }, []);\n  useEffect(() => {\n    // Funktion för att rita vågformsanimation\n    const drawWaveform = () => {\n      if (!canvasRef.current || !isRecording || isPaused) return; // Stoppa animationen om inspelningen är pausad eller inte aktiv\n\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Analyserar ljuddata från mikrofonen\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      analyserRef.current.getByteFrequencyData(dataArray);\n      if (dataArray.every(value => value === 0)) {\n        // Om alla värden är noll (tystnad), stoppa inspelningen efter en viss tid\n        if (!silenceTimeout) {\n          silenceTimeout = setTimeout(() => {\n            handleStopRecording();\n          }, MAX_SILENCE_TIME);\n        }\n      } else {\n        // Om ljud detekteras, återställ tystnads-timern\n        clearTimeout(silenceTimeout);\n        silenceTimeout = null;\n      }\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n\n      // Rita vågformen\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255;\n        const y = v * canvas.height;\n        ctx.fillStyle = '#3b82f6';\n        ctx.fillRect(x, canvas.height - y, sliceWidth, y);\n        x += sliceWidth;\n      }\n      requestAnimationFrame(drawWaveform); // Uppdatera animationen\n    };\n    if (isRecording && !isPaused) {\n      drawWaveform(); // Starta animation när inspelning börjar och inte är pausad\n    }\n  }, [isRecording, isPaused]);\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n    if (isPaused) {\n      // Återuppta inspelning om den är pausad\n      mediaRecorder.resume();\n      setIsPaused(false);\n    } else {\n      // Starta inspelning från början\n      mediaRecorder.start();\n      setIsRecording(true);\n    }\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording();\n    }, MAX_SILENCE_TIME); // Stoppas om tystnad varar mer än MAX_SILENCE_TIME\n\n    mediaRecorder.ondataavailable = event => {\n      const audioBlob = new Blob([event.data], {\n        type: 'audio/webm'\n      });\n      setAudioBlob(audioBlob);\n    };\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n      setIsRecording(false);\n      setIsPaused(false); // Säkerställ att paus är avstängd när inspelningen stoppas\n      clearTimeout(silenceTimeout); // Stoppa tystnads-timer om inspelning stoppas\n    }\n  };\n  const handlePauseRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.pause();\n      setIsPaused(true);\n    }\n  };\n  const handleUpload = async blob => {\n    setLoading(true);\n    try {\n      const audioBlobResponse = await uploadAudio(blob);\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Spela in ett ljud\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-controls\",\n      children: [!isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartRecording,\n        disabled: loading,\n        className: \"btn start-btn\",\n        children: \"Starta inspelning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this) : isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartRecording,\n        disabled: loading,\n        className: \"btn resume-btn\",\n        children: \"\\xC5teruppta inspelning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStopRecording,\n          disabled: loading,\n          className: \"btn stop-btn\",\n          children: \"Stoppa inspelning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePauseRecording,\n          disabled: loading,\n          className: \"btn pause-btn\",\n          children: \"Pausa inspelning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Bearbetar ljud...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 300,\n      height: 100,\n      className: \"waveform-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), responseAudio && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Bearbetat ljud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: responseAudio,\n        controls: true,\n        className: \"audio-player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioUploader, \"r0ZJOCeMmnzvpwjdghXiEVPxJXo=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","useEffect","useRef","uploadAudio","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioUploader","_s","audioBlob","setAudioBlob","isRecording","setIsRecording","isPaused","setIsPaused","mediaRecorder","setMediaRecorder","responseAudio","setResponseAudio","loading","setLoading","audioRef","canvasRef","analyserRef","audioContextRef","microphoneRef","MAX_SILENCE_TIME","silenceTimeout","recordingTimeout","setupRecorder","stream","navigator","mediaDevices","getUserMedia","audio","options","mimeType","recorder","MediaRecorder","current","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","createMediaStreamSource","connect","error","console","drawWaveform","canvas","ctx","getContext","clearRect","width","height","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteFrequencyData","every","value","setTimeout","handleStopRecording","clearTimeout","sliceWidth","x","i","v","y","fillStyle","fillRect","requestAnimationFrame","handleStartRecording","resume","start","ondataavailable","event","Blob","data","type","state","stop","handlePauseRecording","pause","handleUpload","blob","audioBlobResponse","audioURL","URL","createObjectURL","play","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","src","controls","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client';\nimport '../style.css'; // Importera CSS-fil\n\nconst AudioUploader = () => {\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPaused, setIsPaused] = useState(false); // Ny state för att hålla reda på om inspelningen är pausad\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null); // Ref till canvas för vågformsanimation\n  const analyserRef = useRef(null); // Ref till AnalyserNode\n  const audioContextRef = useRef(null); // Ref till AudioContext\n  const microphoneRef = useRef(null); // För att spara mikrofonströmmen\n  const MAX_SILENCE_TIME = 2000; // Tid i millisekunder innan tystnad stoppar inspelningen\n  let silenceTimeout = null; // För att hantera tidsgränsen för tystnad\n  let recordingTimeout = null;\n\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const options = { mimeType: 'audio/webm' };\n        const recorder = new MediaRecorder(stream, options);\n        setMediaRecorder(recorder);\n\n        // Skapa en AudioContext och AnalyserNode för att läsa ljuddata\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n        analyserRef.current = audioContextRef.current.createAnalyser();\n        analyserRef.current.fftSize = 256; // För upplösning på ljudet\n        microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n        microphoneRef.current.connect(analyserRef.current);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n\n    setupRecorder();\n  }, []);\n\n  useEffect(() => {\n    // Funktion för att rita vågformsanimation\n    const drawWaveform = () => {\n      if (!canvasRef.current || !isRecording || isPaused) return; // Stoppa animationen om inspelningen är pausad eller inte aktiv\n\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Analyserar ljuddata från mikrofonen\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      if (dataArray.every(value => value === 0)) {\n        // Om alla värden är noll (tystnad), stoppa inspelningen efter en viss tid\n        if (!silenceTimeout) {\n          silenceTimeout = setTimeout(() => {\n            handleStopRecording();\n          }, MAX_SILENCE_TIME);\n        }\n      } else {\n        // Om ljud detekteras, återställ tystnads-timern\n        clearTimeout(silenceTimeout);\n        silenceTimeout = null;\n      }\n\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n\n      // Rita vågformen\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255;\n        const y = v * canvas.height;\n\n        ctx.fillStyle = '#3b82f6';\n        ctx.fillRect(x, canvas.height - y, sliceWidth, y);\n        x += sliceWidth;\n      }\n\n      requestAnimationFrame(drawWaveform); // Uppdatera animationen\n    };\n\n    if (isRecording && !isPaused) {\n      drawWaveform(); // Starta animation när inspelning börjar och inte är pausad\n    }\n  }, [isRecording, isPaused]);\n\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n\n    if (isPaused) {\n      // Återuppta inspelning om den är pausad\n      mediaRecorder.resume();\n      setIsPaused(false);\n    } else {\n      // Starta inspelning från början\n      mediaRecorder.start();\n      setIsRecording(true);\n    }\n\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording();\n    }, MAX_SILENCE_TIME); // Stoppas om tystnad varar mer än MAX_SILENCE_TIME\n\n    mediaRecorder.ondataavailable = (event) => {\n      const audioBlob = new Blob([event.data], { type: 'audio/webm' });\n      setAudioBlob(audioBlob);\n    };\n  };\n\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n      setIsRecording(false);\n      setIsPaused(false); // Säkerställ att paus är avstängd när inspelningen stoppas\n      clearTimeout(silenceTimeout); // Stoppa tystnads-timer om inspelning stoppas\n    }\n  };\n\n  const handlePauseRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.pause();\n      setIsPaused(true);\n    }\n  };\n\n  const handleUpload = async (blob) => {\n    setLoading(true);\n\n    try {\n      const audioBlobResponse = await uploadAudio(blob);\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]);\n\n  return (\n    <div className=\"audio-uploader\">\n      <h2 className=\"title\">Spela in ett ljud</h2>\n      <div className=\"recording-controls\">\n        {!isRecording ? (\n          <button onClick={handleStartRecording} disabled={loading} className=\"btn start-btn\">\n            Starta inspelning\n          </button>\n        ) : isPaused ? (\n          <button onClick={handleStartRecording} disabled={loading} className=\"btn resume-btn\">\n            Återuppta inspelning\n          </button>\n        ) : (\n          <>\n            <button onClick={handleStopRecording} disabled={loading} className=\"btn stop-btn\">\n              Stoppa inspelning\n            </button>\n            <button onClick={handlePauseRecording} disabled={loading} className=\"btn pause-btn\">\n              Pausa inspelning\n            </button>\n          </>\n        )}\n        {loading && <p className=\"loading-text\">Bearbetar ljud...</p>}\n      </div>\n\n      {/* Vågformsanimation */}\n      <canvas\n        ref={canvasRef}\n        width={300}\n        height={100}\n        className=\"waveform-canvas\"\n      ></canvas>\n\n      {responseAudio && (\n        <div className=\"audio-preview\">\n          <h3>Bearbetat ljud</h3>\n          <audio ref={audioRef} src={responseAudio} controls className=\"audio-player\"></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioUploader;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,WAAW;AACvC,OAAO,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMsB,QAAQ,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMqB,SAAS,GAAGrB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAChC,MAAMsB,WAAW,GAAGtB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAClC,MAAMuB,eAAe,GAAGvB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACtC,MAAMwB,aAAa,GAAGxB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACpC,MAAMyB,gBAAgB,GAAG,IAAI,CAAC,CAAC;EAC/B,IAAIC,cAAc,GAAG,IAAI,CAAC,CAAC;EAC3B,IAAIC,gBAAgB,GAAG,IAAI;EAE3B5B,SAAS,CAAC,MAAM;IACd,MAAM6B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QACzE,MAAMC,OAAO,GAAG;UAAEC,QAAQ,EAAE;QAAa,CAAC;QAC1C,MAAMC,QAAQ,GAAG,IAAIC,aAAa,CAACR,MAAM,EAAEK,OAAO,CAAC;QACnDnB,gBAAgB,CAACqB,QAAQ,CAAC;;QAE1B;QACAb,eAAe,CAACe,OAAO,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;QAClFnB,WAAW,CAACgB,OAAO,GAAGf,eAAe,CAACe,OAAO,CAACI,cAAc,CAAC,CAAC;QAC9DpB,WAAW,CAACgB,OAAO,CAACK,OAAO,GAAG,GAAG,CAAC,CAAC;QACnCnB,aAAa,CAACc,OAAO,GAAGf,eAAe,CAACe,OAAO,CAACM,uBAAuB,CAACf,MAAM,CAAC;QAC/EL,aAAa,CAACc,OAAO,CAACO,OAAO,CAACvB,WAAW,CAACgB,OAAO,CAAC;MACpD,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDlB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN7B,SAAS,CAAC,MAAM;IACd;IACA,MAAMiD,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI,CAAC3B,SAAS,CAACiB,OAAO,IAAI,CAAC5B,WAAW,IAAIE,QAAQ,EAAE,OAAO,CAAC;;MAE5D,MAAMqC,MAAM,GAAG5B,SAAS,CAACiB,OAAO;MAChC,MAAMY,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;MACnCD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEH,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACK,MAAM,CAAC;;MAEhD;MACA,MAAMC,YAAY,GAAGjC,WAAW,CAACgB,OAAO,CAACkB,iBAAiB;MAC1D,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;MAC9CjC,WAAW,CAACgB,OAAO,CAACqB,oBAAoB,CAACF,SAAS,CAAC;MAEnD,IAAIA,SAAS,CAACG,KAAK,CAACC,KAAK,IAAIA,KAAK,KAAK,CAAC,CAAC,EAAE;QACzC;QACA,IAAI,CAACnC,cAAc,EAAE;UACnBA,cAAc,GAAGoC,UAAU,CAAC,MAAM;YAChCC,mBAAmB,CAAC,CAAC;UACvB,CAAC,EAAEtC,gBAAgB,CAAC;QACtB;MACF,CAAC,MAAM;QACL;QACAuC,YAAY,CAACtC,cAAc,CAAC;QAC5BA,cAAc,GAAG,IAAI;MACvB;MAEA,MAAMuC,UAAU,GAAGhB,MAAM,CAACI,KAAK,GAAG,GAAG,GAAGE,YAAY;MACpD,IAAIW,CAAC,GAAG,CAAC;;MAET;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,YAAY,EAAEY,CAAC,EAAE,EAAE;QACrC,MAAMC,CAAC,GAAGX,SAAS,CAACU,CAAC,CAAC,GAAG,GAAG;QAC5B,MAAME,CAAC,GAAGD,CAAC,GAAGnB,MAAM,CAACK,MAAM;QAE3BJ,GAAG,CAACoB,SAAS,GAAG,SAAS;QACzBpB,GAAG,CAACqB,QAAQ,CAACL,CAAC,EAAEjB,MAAM,CAACK,MAAM,GAAGe,CAAC,EAAEJ,UAAU,EAAEI,CAAC,CAAC;QACjDH,CAAC,IAAID,UAAU;MACjB;MAEAO,qBAAqB,CAACxB,YAAY,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,IAAItC,WAAW,IAAI,CAACE,QAAQ,EAAE;MAC5BoC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACtC,WAAW,EAAEE,QAAQ,CAAC,CAAC;EAE3B,MAAM6D,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAAC3D,aAAa,EAAE;IAEpB,IAAIF,QAAQ,EAAE;MACZ;MACAE,aAAa,CAAC4D,MAAM,CAAC,CAAC;MACtB7D,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,MAAM;MACL;MACAC,aAAa,CAAC6D,KAAK,CAAC,CAAC;MACrBhE,cAAc,CAAC,IAAI,CAAC;IACtB;IAEAgB,gBAAgB,GAAGmC,UAAU,CAAC,MAAM;MAClCC,mBAAmB,CAAC,CAAC;IACvB,CAAC,EAAEtC,gBAAgB,CAAC,CAAC,CAAC;;IAEtBX,aAAa,CAAC8D,eAAe,GAAIC,KAAK,IAAK;MACzC,MAAMrE,SAAS,GAAG,IAAIsE,IAAI,CAAC,CAACD,KAAK,CAACE,IAAI,CAAC,EAAE;QAAEC,IAAI,EAAE;MAAa,CAAC,CAAC;MAChEvE,YAAY,CAACD,SAAS,CAAC;IACzB,CAAC;EACH,CAAC;EAED,MAAMuD,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAIjD,aAAa,IAAIA,aAAa,CAACmE,KAAK,KAAK,WAAW,EAAE;MACxDnE,aAAa,CAACoE,IAAI,CAAC,CAAC;MACpBlB,YAAY,CAACrC,gBAAgB,CAAC;MAC9BhB,cAAc,CAAC,KAAK,CAAC;MACrBE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACpBmD,YAAY,CAACtC,cAAc,CAAC,CAAC,CAAC;IAChC;EACF,CAAC;EAED,MAAMyD,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIrE,aAAa,IAAIA,aAAa,CAACmE,KAAK,KAAK,WAAW,EAAE;MACxDnE,aAAa,CAACsE,KAAK,CAAC,CAAC;MACrBvE,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;EAED,MAAMwE,YAAY,GAAG,MAAOC,IAAI,IAAK;IACnCnE,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF,MAAMoE,iBAAiB,GAAG,MAAMtF,WAAW,CAACqF,IAAI,CAAC;MACjD,MAAME,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACH,iBAAiB,CAAC;MACvDtE,gBAAgB,CAACuE,QAAQ,CAAC;IAC5B,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,SAAS;MACR3B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd,IAAIiB,aAAa,IAAII,QAAQ,CAACkB,OAAO,EAAE;MACrClB,QAAQ,CAACkB,OAAO,CAACqD,IAAI,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAAC3E,aAAa,CAAC,CAAC;EAEnB,oBACEb,OAAA;IAAKyF,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1F,OAAA;MAAIyF,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5C9F,OAAA;MAAKyF,SAAS,EAAC,oBAAoB;MAAAC,QAAA,GAChC,CAACnF,WAAW,gBACXP,OAAA;QAAQ+F,OAAO,EAAEzB,oBAAqB;QAAC0B,QAAQ,EAAEjF,OAAQ;QAAC0E,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAEpF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,GACPrF,QAAQ,gBACVT,OAAA;QAAQ+F,OAAO,EAAEzB,oBAAqB;QAAC0B,QAAQ,EAAEjF,OAAQ;QAAC0E,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAErF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAET9F,OAAA,CAAAE,SAAA;QAAAwF,QAAA,gBACE1F,OAAA;UAAQ+F,OAAO,EAAEnC,mBAAoB;UAACoC,QAAQ,EAAEjF,OAAQ;UAAC0E,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAElF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT9F,OAAA;UAAQ+F,OAAO,EAAEf,oBAAqB;UAACgB,QAAQ,EAAEjF,OAAQ;UAAC0E,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAEpF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACT,CACH,EACA/E,OAAO,iBAAIf,OAAA;QAAGyF,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,eAGN9F,OAAA;MACEiG,GAAG,EAAE/E,SAAU;MACfgC,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE,GAAI;MACZsC,SAAS,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,EAETjF,aAAa,iBACZb,OAAA;MAAKyF,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B1F,OAAA;QAAA0F,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvB9F,OAAA;QAAOiG,GAAG,EAAEhF,QAAS;QAACiF,GAAG,EAAErF,aAAc;QAACsF,QAAQ;QAACV,SAAS,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1F,EAAA,CA3LID,aAAa;AAAAiG,EAAA,GAAbjG,aAAa;AA6LnB,eAAeA,aAAa;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}