{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = () => {\n  _s();\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false); // Ny state för att hålla reda på väntan på svar\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null); // Ref till canvas för vågformsanimation\n  const analyserRef = useRef(null); // Ref till AnalyserNode\n  const audioContextRef = useRef(null); // Ref till AudioContext\n  const microphoneRef = useRef(null); // För att spara mikrofonströmmen\n  const MAX_RECORDING_TIME = 5000;\n  let recordingTimeout = null;\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const options = {\n          mimeType: 'audio/webm'\n        };\n        const recorder = new MediaRecorder(stream, options);\n        setMediaRecorder(recorder);\n\n        // Skapa en AudioContext och AnalyserNode för att läsa ljuddata\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n        analyserRef.current = audioContextRef.current.createAnalyser();\n        analyserRef.current.fftSize = 256; // För upplösning på ljudet\n        microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n        microphoneRef.current.connect(analyserRef.current);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n    setupRecorder();\n  }, []);\n  useEffect(() => {\n    // Funktion för att rita vågformsanimation\n    const drawWaveform = () => {\n      if (!canvasRef.current || !isRecording || isWaitingForResponse) return; // Stoppa animation om vi väntar på svar\n\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Analyserar ljuddata från mikrofonen\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      analyserRef.current.getByteFrequencyData(dataArray);\n      if (dataArray.every(value => value === 0)) {\n        // Om alla värden är noll (tystnad), stoppa animationen\n        return;\n      }\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n\n      // Rita vågformen\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255;\n        const y = v * canvas.height;\n        ctx.fillStyle = '#3b82f6';\n        ctx.fillRect(x, canvas.height - y, sliceWidth, y);\n        x += sliceWidth;\n      }\n      requestAnimationFrame(drawWaveform); // Uppdatera animationen\n    };\n    if (isRecording && !isWaitingForResponse) {\n      drawWaveform(); // Starta animation när inspelning börjar och vi inte väntar på svar\n    }\n  }, [isRecording, isWaitingForResponse]); // Lägg till isWaitingForResponse som beroende\n\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n    mediaRecorder.start();\n    setIsRecording(true);\n    mediaRecorder.ondataavailable = event => {\n      const audioBlob = new Blob([event.data], {\n        type: 'audio/webm'\n      });\n      setAudioBlob(audioBlob);\n    };\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording();\n    }, MAX_RECORDING_TIME);\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n      setIsRecording(false);\n    }\n  };\n  const handleUpload = async blob => {\n    setLoading(true);\n    setIsWaitingForResponse(true); // Användare väntar på svar\n\n    try {\n      const audioBlobResponse = await uploadAudio(blob);\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n      setIsWaitingForResponse(false); // När svaret har mottagits, stoppa väntan\n    }\n  };\n  useEffect(() => {\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Spela in ett ljud\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: loading,\n      children: \"Starta inspelning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: loading,\n      children: \"Stoppa inspelning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bearbetar ljud...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 300,\n      height: 100,\n      style: {\n        marginTop: '10px',\n        backgroundColor: 'transparent',\n        // Gör bakgrunden genomskinlig\n        display: 'block',\n        // Ta bort eventuella kanter från canvas\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), responseAudio && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Bearbetat ljud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: responseAudio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioUploader, \"3I6ShrgxCfBhRrr7ms4XU8kAL7U=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","useEffect","useRef","uploadAudio","jsxDEV","_jsxDEV","AudioUploader","_s","audioBlob","setAudioBlob","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","responseAudio","setResponseAudio","loading","setLoading","isWaitingForResponse","setIsWaitingForResponse","audioRef","canvasRef","analyserRef","audioContextRef","microphoneRef","MAX_RECORDING_TIME","recordingTimeout","setupRecorder","stream","navigator","mediaDevices","getUserMedia","audio","options","mimeType","recorder","MediaRecorder","current","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","createMediaStreamSource","connect","error","console","drawWaveform","canvas","ctx","getContext","clearRect","width","height","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteFrequencyData","every","value","sliceWidth","x","i","v","y","fillStyle","fillRect","requestAnimationFrame","handleStartRecording","start","ondataavailable","event","Blob","data","type","setTimeout","handleStopRecording","state","stop","clearTimeout","handleUpload","blob","audioBlobResponse","audioURL","URL","createObjectURL","play","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","marginTop","backgroundColor","display","marginLeft","marginRight","src","controls","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client';\n\nconst AudioUploader = () => {\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false); // Ny state för att hålla reda på väntan på svar\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null); // Ref till canvas för vågformsanimation\n  const analyserRef = useRef(null); // Ref till AnalyserNode\n  const audioContextRef = useRef(null); // Ref till AudioContext\n  const microphoneRef = useRef(null); // För att spara mikrofonströmmen\n  const MAX_RECORDING_TIME = 5000;\n  let recordingTimeout = null;\n\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const options = { mimeType: 'audio/webm' };\n        const recorder = new MediaRecorder(stream, options);\n        setMediaRecorder(recorder);\n\n        // Skapa en AudioContext och AnalyserNode för att läsa ljuddata\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n        analyserRef.current = audioContextRef.current.createAnalyser();\n        analyserRef.current.fftSize = 256; // För upplösning på ljudet\n        microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n        microphoneRef.current.connect(analyserRef.current);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n\n    setupRecorder();\n  }, []);\n\n  useEffect(() => {\n    // Funktion för att rita vågformsanimation\n    const drawWaveform = () => {\n      if (!canvasRef.current || !isRecording || isWaitingForResponse) return; // Stoppa animation om vi väntar på svar\n\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Analyserar ljuddata från mikrofonen\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      if (dataArray.every(value => value === 0)) {\n        // Om alla värden är noll (tystnad), stoppa animationen\n        return;\n      }\n\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n\n      // Rita vågformen\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255;\n        const y = v * canvas.height;\n\n        ctx.fillStyle = '#3b82f6';\n        ctx.fillRect(x, canvas.height - y, sliceWidth, y);\n        x += sliceWidth;\n      }\n\n      requestAnimationFrame(drawWaveform); // Uppdatera animationen\n    };\n\n    if (isRecording && !isWaitingForResponse) {\n      drawWaveform(); // Starta animation när inspelning börjar och vi inte väntar på svar\n    }\n  }, [isRecording, isWaitingForResponse]); // Lägg till isWaitingForResponse som beroende\n\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n\n    mediaRecorder.start();\n    setIsRecording(true);\n\n    mediaRecorder.ondataavailable = (event) => {\n      const audioBlob = new Blob([event.data], { type: 'audio/webm' });\n      setAudioBlob(audioBlob);\n    };\n\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording();\n    }, MAX_RECORDING_TIME);\n  };\n\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n      setIsRecording(false);\n    }\n  };\n\n  const handleUpload = async (blob) => {\n    setLoading(true);\n    setIsWaitingForResponse(true); // Användare väntar på svar\n\n    try {\n      const audioBlobResponse = await uploadAudio(blob);\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n      setIsWaitingForResponse(false); // När svaret har mottagits, stoppa väntan\n    }\n  };\n\n  useEffect(() => {\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]);\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h2>Spela in ett ljud</h2>\n      {!isRecording ? (\n        <button onClick={handleStartRecording} disabled={loading}>\n          Starta inspelning\n        </button>\n      ) : (\n        <button onClick={handleStopRecording} disabled={loading}>\n          Stoppa inspelning\n        </button>\n      )}\n\n      {loading && <p>Bearbetar ljud...</p>}\n\n      {/* Vågformsanimation utan synlig box */}\n      <canvas\n        ref={canvasRef}\n        width={300}\n        height={100}\n        style={{\n          marginTop: '10px',\n          backgroundColor: 'transparent', // Gör bakgrunden genomskinlig\n          display: 'block', // Ta bort eventuella kanter från canvas\n          marginLeft: 'auto',\n          marginRight: 'auto',\n        }}\n      ></canvas>\n\n      {responseAudio && (\n        <div>\n          <h3>Bearbetat ljud</h3>\n          <audio ref={audioRef} src={responseAudio} controls></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}