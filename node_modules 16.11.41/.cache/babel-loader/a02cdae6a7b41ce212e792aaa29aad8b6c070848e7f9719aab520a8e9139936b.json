{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport AuthModal from './components/AuthModal'; // Modal för inloggning och registrering\nimport { signInAnonymously, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from './firebaseConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentScreen, setCurrentScreen] = useState(null); // Hanterar vilken modal som visas\n  const [showAuthModal, setShowAuthModal] = useState(false); // Hanterar om modalen visas\n  const [loading, setLoading] = useState(true); // Lägg till loading state\n\n  useEffect(() => {\n    // Kolla om användaren redan är inloggad\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        setIsAuthenticated(true);\n      } else {\n        signInAnonymously(auth); // Automatisk gästinloggning om inte inloggad\n      }\n      setLoading(false); // När authstatusen har laddats, sätt loading till false\n    });\n    return () => unsubscribe();\n  }, []);\n  const handleOpenAuthModal = mode => {\n    setCurrentScreen(mode); // Sätt modalen som login eller register\n    setShowAuthModal(true);\n  };\n  const handleCloseAuthModal = () => {\n    setShowAuthModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '10px',\n        right: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleOpenAuthModal('login'),\n        children: \"Logga in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleOpenAuthModal('register'),\n        children: \"Registrera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Laddar...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) // Visa laddning när autentisering är pågående\n    : /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), showAuthModal && /*#__PURE__*/_jsxDEV(AuthModal, {\n      mode: currentScreen,\n      onClose: handleCloseAuthModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uXiKF9S3DsrhJiMBbhIOcfSzmqg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Home","Login","Signup","AuthModal","signInAnonymously","onAuthStateChanged","auth","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","currentScreen","setCurrentScreen","showAuthModal","setShowAuthModal","loading","setLoading","unsubscribe","user","handleOpenAuthModal","mode","handleCloseAuthModal","children","style","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport AuthModal from './components/AuthModal'; // Modal för inloggning och registrering\nimport { signInAnonymously, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from './firebaseConfig';\n\nconst App = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentScreen, setCurrentScreen] = useState(null); // Hanterar vilken modal som visas\n  const [showAuthModal, setShowAuthModal] = useState(false); // Hanterar om modalen visas\n  const [loading, setLoading] = useState(true); // Lägg till loading state\n\n  useEffect(() => {\n    // Kolla om användaren redan är inloggad\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setIsAuthenticated(true);\n      } else {\n        signInAnonymously(auth); // Automatisk gästinloggning om inte inloggad\n      }\n      setLoading(false);  // När authstatusen har laddats, sätt loading till false\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const handleOpenAuthModal = (mode) => {\n    setCurrentScreen(mode); // Sätt modalen som login eller register\n    setShowAuthModal(true);\n  };\n\n  const handleCloseAuthModal = () => {\n    setShowAuthModal(false);\n  };\n\n  return (\n    <div>\n      {/* Knapp för att öppna inloggnings-/registreringsmodal */}\n      <div style={{ position: 'absolute', top: '10px', right: '10px' }}>\n        <button onClick={() => handleOpenAuthModal('login')}>Logga in</button>\n        <button onClick={() => handleOpenAuthModal('register')}>Registrera</button>\n      </div>\n\n      {/* Huvudsida */}\n      {loading ? (\n        <div>Laddar...</div>  // Visa laddning när autentisering är pågående\n      ) : (\n        <Home />\n      )}\n\n      {/* Modal för inloggning eller registrering */}\n      {showAuthModal && (\n        <AuthModal mode={currentScreen} onClose={handleCloseAuthModal} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}