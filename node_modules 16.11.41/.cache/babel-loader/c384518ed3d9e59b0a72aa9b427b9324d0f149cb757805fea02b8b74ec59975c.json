{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client';\nimport '../style.css'; // Importera CSS-fil\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = () => {\n  _s();\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null); // Ref till canvas för vågformsanimation\n  const analyserRef = useRef(null); // Ref till AnalyserNode\n  const audioContextRef = useRef(null); // Ref till AudioContext\n  const microphoneRef = useRef(null); // För att spara mikrofonströmmen\n  const [silenceTimeout, setSilenceTimeout] = useState(null);\n  const [isPaused, setIsPaused] = useState(false);\n  const MAX_RECORDING_TIME = 50000;\n  let recordingTimeout = null;\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const options = {\n          mimeType: 'audio/webm'\n        };\n        const recorder = new MediaRecorder(stream, options);\n        setMediaRecorder(recorder);\n\n        // Skapa en AudioContext och AnalyserNode för att läsa ljuddata\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n        analyserRef.current = audioContextRef.current.createAnalyser();\n        analyserRef.current.fftSize = 256; // För upplösning på ljudet\n        microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n        microphoneRef.current.connect(analyserRef.current);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n    setupRecorder();\n  }, []);\n  useEffect(() => {\n    // Funktion för att rita vågformsanimation\n    const drawWaveform = () => {\n      if (!canvasRef.current || !isRecording) return;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Analyserar ljuddata från mikrofonen\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      analyserRef.current.getByteFrequencyData(dataArray);\n      if (dataArray.every(value => value === 0)) {\n        // Om alla värden är noll (tystnad), stoppa animationen\n        return;\n      }\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n\n      // Rita vågformen\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255;\n        const y = v * canvas.height;\n        ctx.fillStyle = '#3b82f6';\n        ctx.fillRect(x, canvas.height - y, sliceWidth, y);\n        x += sliceWidth;\n      }\n      requestAnimationFrame(drawWaveform); // Uppdatera animationen\n    };\n    if (isRecording) {\n      drawWaveform(); // Starta animation när inspelning börjar\n    }\n  }, [isRecording]);\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n    mediaRecorder.start();\n    setIsRecording(true);\n    setIsPaused(false);\n    mediaRecorder.ondataavailable = event => {\n      const audioBlob = new Blob([event.data], {\n        type: 'audio/webm'\n      });\n      setAudioBlob(audioBlob);\n    };\n\n    // Starta automatisk stopp om användaren inte pratar\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording(); // Stoppa inspelningen automatiskt efter MAX_RECORDING_TIME\n    }, MAX_RECORDING_TIME);\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n      setIsRecording(false);\n      setIsPaused(false);\n    }\n  };\n  const handleUpload = async blob => {\n    setLoading(true);\n    try {\n      const audioBlobResponse = await uploadAudio(blob);\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]);\n  useEffect(() => {\n    if (isRecording) {\n      // Ljudnivå övervakning\n      const checkSilence = () => {\n        if (!isRecording) return;\n        const bufferLength = analyserRef.current.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n        analyserRef.current.getByteFrequencyData(dataArray);\n\n        // Kontrollera om ljudet är tyst\n        const isSilent = dataArray.every(value => value < 10); // Om alla värden är under 10 (tystnad)\n\n        if (isSilent) {\n          if (!silenceTimeout) {\n            // Starta timeout om tystnaden varar\n            setSilenceTimeout(setTimeout(() => {\n              handleStopRecording(); // Stoppning om ljudnivån inte höjs efter 1 sekund\n            }, 1000)); // Timeout på 1 sekund\n          }\n        } else {\n          if (silenceTimeout) {\n            clearTimeout(silenceTimeout); // Rensa timeout om ljudet inte är tyst\n            setSilenceTimeout(null);\n          }\n        }\n        requestAnimationFrame(checkSilence);\n      };\n      checkSilence(); // Starta övervakningen när inspelningen är aktiv\n    }\n  }, [isRecording, silenceTimeout]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Spela in ett ljud\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-controls\",\n      children: [!isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartRecording,\n        disabled: loading,\n        className: \"btn start-btn\",\n        children: \"Starta inspelning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStopRecording,\n        disabled: loading,\n        className: \"btn stop-btn\",\n        children: \"Stoppa inspelning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Bearbetar ljud...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 300,\n      height: 100,\n      className: \"waveform-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), responseAudio && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Bearbetat ljud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: responseAudio,\n        controls: true,\n        className: \"audio-player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioUploader, \"Q6KYbAUFIsEIJelg9/tSj8M8+FA=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","useEffect","useRef","uploadAudio","jsxDEV","_jsxDEV","AudioUploader","_s","audioBlob","setAudioBlob","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","responseAudio","setResponseAudio","loading","setLoading","audioRef","canvasRef","analyserRef","audioContextRef","microphoneRef","silenceTimeout","setSilenceTimeout","isPaused","setIsPaused","MAX_RECORDING_TIME","recordingTimeout","setupRecorder","stream","navigator","mediaDevices","getUserMedia","audio","options","mimeType","recorder","MediaRecorder","current","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","createMediaStreamSource","connect","error","console","drawWaveform","canvas","ctx","getContext","clearRect","width","height","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteFrequencyData","every","value","sliceWidth","x","i","v","y","fillStyle","fillRect","requestAnimationFrame","handleStartRecording","start","ondataavailable","event","Blob","data","type","setTimeout","handleStopRecording","state","stop","clearTimeout","handleUpload","blob","audioBlobResponse","audioURL","URL","createObjectURL","play","checkSilence","isSilent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","src","controls","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client';\nimport '../style.css'; // Importera CSS-fil\n\nconst AudioUploader = () => {\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null); // Ref till canvas för vågformsanimation\n  const analyserRef = useRef(null); // Ref till AnalyserNode\n  const audioContextRef = useRef(null); // Ref till AudioContext\n  const microphoneRef = useRef(null); // För att spara mikrofonströmmen\n  const [silenceTimeout, setSilenceTimeout] = useState(null);\n  const [isPaused, setIsPaused] = useState(false);\n  const MAX_RECORDING_TIME = 50000;  \n  let recordingTimeout = null;\n\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const options = { mimeType: 'audio/webm' };\n        const recorder = new MediaRecorder(stream, options);\n        setMediaRecorder(recorder);\n\n        // Skapa en AudioContext och AnalyserNode för att läsa ljuddata\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n        analyserRef.current = audioContextRef.current.createAnalyser();\n        analyserRef.current.fftSize = 256; // För upplösning på ljudet\n        microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n        microphoneRef.current.connect(analyserRef.current);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n\n    setupRecorder();\n  }, []);\n\n  useEffect(() => {\n    // Funktion för att rita vågformsanimation\n    const drawWaveform = () => {\n      if (!canvasRef.current || !isRecording) return;\n\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Analyserar ljuddata från mikrofonen\n      const bufferLength = analyserRef.current.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      if (dataArray.every(value => value === 0)) {\n        // Om alla värden är noll (tystnad), stoppa animationen\n        return;\n      }\n\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n\n      // Rita vågformen\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255;\n        const y = v * canvas.height;\n\n        ctx.fillStyle = '#3b82f6';\n        ctx.fillRect(x, canvas.height - y, sliceWidth, y);\n        x += sliceWidth;\n      }\n\n      requestAnimationFrame(drawWaveform); // Uppdatera animationen\n    };\n\n    if (isRecording) {\n      drawWaveform(); // Starta animation när inspelning börjar\n    }\n  }, [isRecording]);\n\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n\n    mediaRecorder.start();\n    setIsRecording(true);\n    setIsPaused(false);\n\n    mediaRecorder.ondataavailable = (event) => {\n      const audioBlob = new Blob([event.data], { type: 'audio/webm' });\n      setAudioBlob(audioBlob);\n    };\n\n    // Starta automatisk stopp om användaren inte pratar\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording(); // Stoppa inspelningen automatiskt efter MAX_RECORDING_TIME\n    }, MAX_RECORDING_TIME);\n  };\n\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n      setIsRecording(false);\n      setIsPaused(false);\n    }\n  };\n\n  const handleUpload = async (blob) => {\n    setLoading(true);\n\n    try {\n      const audioBlobResponse = await uploadAudio(blob);\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]);\n\n  useEffect(() => {\n    if (isRecording) {\n      // Ljudnivå övervakning\n      const checkSilence = () => {\n        if (!isRecording) return;\n\n        const bufferLength = analyserRef.current.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n        analyserRef.current.getByteFrequencyData(dataArray);\n\n        // Kontrollera om ljudet är tyst\n        const isSilent = dataArray.every(value => value < 10); // Om alla värden är under 10 (tystnad)\n        \n        if (isSilent) {\n          if (!silenceTimeout) {\n            // Starta timeout om tystnaden varar\n            setSilenceTimeout(setTimeout(() => {\n              handleStopRecording(); // Stoppning om ljudnivån inte höjs efter 1 sekund\n            }, 1000)); // Timeout på 1 sekund\n          }\n        } else {\n          if (silenceTimeout) {\n            clearTimeout(silenceTimeout); // Rensa timeout om ljudet inte är tyst\n            setSilenceTimeout(null);\n          }\n        }\n\n        requestAnimationFrame(checkSilence);\n      };\n\n      checkSilence(); // Starta övervakningen när inspelningen är aktiv\n    }\n  }, [isRecording, silenceTimeout]);\n\n  return (\n    <div className=\"audio-uploader\">\n      <h2 className=\"title\">Spela in ett ljud</h2>\n      <div className=\"recording-controls\">\n        {!isRecording ? (\n          <button onClick={handleStartRecording} disabled={loading} className=\"btn start-btn\">\n            Starta inspelning\n          </button>\n        ) : (\n          <button onClick={handleStopRecording} disabled={loading} className=\"btn stop-btn\">\n            Stoppa inspelning\n          </button>\n        )}\n        {loading && <p className=\"loading-text\">Bearbetar ljud...</p>}\n      </div>\n\n      {/* Vågformsanimation */}\n      <canvas\n        ref={canvasRef}\n        width={300}\n        height={100}\n        className=\"waveform-canvas\"\n      ></canvas>\n\n      {responseAudio && (\n        <div className=\"audio-preview\">\n          <h3>Bearbetat ljud</h3>\n          <audio ref={audioRef} src={responseAudio} controls className=\"audio-player\"></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}