{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/Waveform.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaveformAnimation = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false); // För att hålla reda på om inspelning pågår\n  const canvasRef = useRef(null); // För att referera till canvas-elementet\n  const audioContextRef = useRef(null); // För att lagra AudioContext\n  const analyserRef = useRef(null); // För att lagra AnalyserNode\n  const microphoneRef = useRef(null); // För att lagra mikrofonströmmens data\n  const requestIdRef = useRef(null); // För att lagra animationens request id (för att stoppa den när vi inte behöver den längre)\n\n  useEffect(() => {\n    // Stänger av ljudanalys när komponenten avmonteras\n    return () => {\n      cancelAnimationFrame(requestIdRef.current);\n      if (microphoneRef.current) {\n        microphoneRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n      microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n      microphoneRef.current.connect(analyserRef.current);\n      setIsRecording(true);\n      animateWaveform();\n    } catch (err) {\n      console.error('Error accessing microphone: ', err);\n    }\n  };\n  const stopRecording = () => {\n    setIsRecording(false);\n    cancelAnimationFrame(requestIdRef.current);\n    if (microphoneRef.current) {\n      microphoneRef.current.getTracks().forEach(track => track.stop());\n    }\n  };\n  const animateWaveform = () => {\n    if (!analyserRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const draw = () => {\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      // Rensa canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Rita vågformen\n      ctx.beginPath();\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255; // Skala värdet mellan 0 och 1\n        const y = v * canvas.height;\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n        x += sliceWidth;\n      }\n      ctx.lineTo(canvas.width, canvas.height / 2);\n      ctx.strokeStyle = 'rgb(0, 204, 255)';\n      ctx.stroke();\n      requestIdRef.current = requestAnimationFrame(draw); // Fortsätt animera\n    };\n    draw();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"400\",\n      height: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        children: \"Starta inspelning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        children: \"Stoppa inspelning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(WaveformAnimation, \"knT/wlc0bFVnLMjq4tGl23eNSRg=\");\n_c = WaveformAnimation;\nexport default WaveformAnimation;\nvar _c;\n$RefreshReg$(_c, \"WaveformAnimation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","WaveformAnimation","_s","isRecording","setIsRecording","canvasRef","audioContextRef","analyserRef","microphoneRef","requestIdRef","cancelAnimationFrame","current","getTracks","forEach","track","stop","close","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","createMediaStreamSource","connect","animateWaveform","err","console","error","stopRecording","canvas","ctx","getContext","bufferLength","frequencyBinCount","dataArray","Uint8Array","draw","getByteFrequencyData","clearRect","width","height","beginPath","sliceWidth","x","i","v","y","moveTo","lineTo","strokeStyle","stroke","requestAnimationFrame","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/Waveform.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst WaveformAnimation = () => {\n  const [isRecording, setIsRecording] = useState(false); // För att hålla reda på om inspelning pågår\n  const canvasRef = useRef(null); // För att referera till canvas-elementet\n  const audioContextRef = useRef(null); // För att lagra AudioContext\n  const analyserRef = useRef(null); // För att lagra AnalyserNode\n  const microphoneRef = useRef(null); // För att lagra mikrofonströmmens data\n  const requestIdRef = useRef(null); // För att lagra animationens request id (för att stoppa den när vi inte behöver den längre)\n\n  useEffect(() => {\n    // Stänger av ljudanalys när komponenten avmonteras\n    return () => {\n      cancelAnimationFrame(requestIdRef.current);\n      if (microphoneRef.current) {\n        microphoneRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n\n      microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n      microphoneRef.current.connect(analyserRef.current);\n\n      setIsRecording(true);\n      animateWaveform();\n    } catch (err) {\n      console.error('Error accessing microphone: ', err);\n    }\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n    cancelAnimationFrame(requestIdRef.current);\n    if (microphoneRef.current) {\n      microphoneRef.current.getTracks().forEach(track => track.stop());\n    }\n  };\n\n  const animateWaveform = () => {\n    if (!analyserRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    const draw = () => {\n      analyserRef.current.getByteFrequencyData(dataArray);\n      \n      // Rensa canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Rita vågformen\n      ctx.beginPath();\n      const sliceWidth = canvas.width * 1.0 / bufferLength;\n      let x = 0;\n\n      for (let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 255; // Skala värdet mellan 0 och 1\n        const y = v * canvas.height;\n\n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      ctx.lineTo(canvas.width, canvas.height / 2);\n      ctx.strokeStyle = 'rgb(0, 204, 255)';\n      ctx.stroke();\n\n      requestIdRef.current = requestAnimationFrame(draw); // Fortsätt animera\n    };\n\n    draw();\n  };\n\n  return (\n    <div>\n      <canvas ref={canvasRef} width=\"400\" height=\"100\"></canvas>\n      <div>\n        {!isRecording ? (\n          <button onClick={startRecording}>Starta inspelning</button>\n        ) : (\n          <button onClick={stopRecording}>Stoppa inspelning</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WaveformAnimation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}