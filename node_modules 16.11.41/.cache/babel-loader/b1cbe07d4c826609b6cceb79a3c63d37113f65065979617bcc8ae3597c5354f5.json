{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/LanguageSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Komponent för att visa ljudvågor\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SoundWaves = ({\n  volume\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sound-waves\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wave\",\n      style: {\n        height: `${volume}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wave\",\n      style: {\n        height: `${volume * 0.8}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wave\",\n      style: {\n        height: `${volume * 0.6}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wave\",\n      style: {\n        height: `${volume * 0.4}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = SoundWaves;\nconst VoiceInput = () => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [volume, setVolume] = useState(0);\n  useEffect(() => {\n    // Kontrollera om webbsidan stöder Web Speech API\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.log('Web Speech API stöds inte i denna webbläsare.');\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // Fortsätt lyssna efter varje segment\n    recognition.interimResults = true; // Visa mellanresultat medan användaren talar\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    // Här mäter vi volymen baserat på mikrofonens ljudstyrka\n    recognition.onresult = event => {\n      let volumeLevel = 0;\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        if (event.results[i].isFinal) {\n          const result = event.results[i][0].transcript;\n          console.log('Talad text:', result);\n        } else {\n          // Beräkna volymnivån baserat på ljudstyrka\n          volumeLevel = Math.random() * 100; // Här kan du sätta en mer exakt volymmätning\n        }\n      }\n      setVolume(volumeLevel); // Uppdatera volymnivån\n    };\n\n    // Starta taligenkänning när komponenten är monterad\n    recognition.start();\n\n    // Rensa upp vid komponentens avmontering\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: isListening ? 'Lyssnar...' : 'Klar för röstinmatning'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SoundWaves, {\n      volume: volume\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceInput, \"93jps8Zy8HJTQJDU9LxF9+rZdyM=\");\n_c2 = VoiceInput;\nexport default VoiceInput;\nvar _c, _c2;\n$RefreshReg$(_c, \"SoundWaves\");\n$RefreshReg$(_c2, \"VoiceInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SoundWaves","volume","className","children","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","VoiceInput","_s","isListening","setIsListening","setVolume","SpeechRecognition","window","webkitSpeechRecognition","console","log","recognition","continuous","interimResults","onstart","onend","onresult","event","volumeLevel","i","resultIndex","results","length","isFinal","result","transcript","Math","random","start","stop","_c2","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/LanguageSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Komponent för att visa ljudvågor\nconst SoundWaves = ({ volume }) => {\n  return (\n    <div className=\"sound-waves\">\n      {/* Vi använder flera divs som representerar olika ljudvågor */}\n      <div className=\"wave\" style={{ height: `${volume}%` }}></div>\n      <div className=\"wave\" style={{ height: `${volume * 0.8}%` }}></div>\n      <div className=\"wave\" style={{ height: `${volume * 0.6}%` }}></div>\n      <div className=\"wave\" style={{ height: `${volume * 0.4}%` }}></div>\n    </div>\n  );\n};\n\nconst VoiceInput = () => {\n  const [isListening, setIsListening] = useState(false);\n  const [volume, setVolume] = useState(0);\n\n  useEffect(() => {\n    // Kontrollera om webbsidan stöder Web Speech API\n    const SpeechRecognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!SpeechRecognition) {\n      console.log('Web Speech API stöds inte i denna webbläsare.');\n      return;\n    }\n\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // Fortsätt lyssna efter varje segment\n    recognition.interimResults = true; // Visa mellanresultat medan användaren talar\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    // Här mäter vi volymen baserat på mikrofonens ljudstyrka\n    recognition.onresult = (event) => {\n      let volumeLevel = 0;\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        if (event.results[i].isFinal) {\n          const result = event.results[i][0].transcript;\n          console.log('Talad text:', result);\n        } else {\n          // Beräkna volymnivån baserat på ljudstyrka\n          volumeLevel = Math.random() * 100; // Här kan du sätta en mer exakt volymmätning\n        }\n      }\n      setVolume(volumeLevel); // Uppdatera volymnivån\n    };\n\n    // Starta taligenkänning när komponenten är monterad\n    recognition.start();\n\n    // Rensa upp vid komponentens avmontering\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n\n  return (\n    <div className=\"voice-input-container\">\n      <h3>{isListening ? 'Lyssnar...' : 'Klar för röstinmatning'}</h3>\n      <SoundWaves volume={volume} />\n    </div>\n  );\n};\n\nexport default VoiceInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}