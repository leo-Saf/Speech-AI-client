{"ast":null,"code":"var _jsxFileName = \"/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client'; // Importera client.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = () => {\n  _s();\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const audioRef = useRef(null); // ref till audio element\n  const MAX_RECORDING_TIME = 5000; // 5 sekunder for now\n  let recordingTimeout = null;\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        let options = {\n          mimeType: 'audio/webm'\n        };\n        if (!MediaRecorder.isTypeSupported('audio/webm')) {\n          console.warn('audio/webm stöds inte. Försöker använda audio/wav istället.');\n          options = {\n            mimeType: 'audio/wav'\n          }; // fallback om webm inte stöds\n        }\n        const recorder = new MediaRecorder(stream, options);\n        setMediaRecorder(recorder);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error);\n      }\n    };\n    setupRecorder();\n  }, []);\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n    mediaRecorder.start();\n    setIsRecording(true);\n    const audioChunks = [];\n    mediaRecorder.ondataavailable = event => {\n      audioChunks.push(event.data);\n    };\n    mediaRecorder.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/webm'\n      });\n      setAudioBlob(audioBlob);\n      setIsRecording(false);\n\n      // automatiskt laddaupp filen\n      await handleUpload(audioBlob);\n    };\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording();\n    }, MAX_RECORDING_TIME);\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n    }\n  };\n  const handleUpload = async blob => {\n    if (!blob) {\n      console.warn(\"no audio to upload.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const audioBlobResponse = await uploadAudio(blob); // Anropa backend via client.js\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // spela responsen automatiskt när det går / den är avaialble\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]); // körs varje gång `responseAudio` ändras\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Spela in ett ljud\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: loading,\n      children: \"Starta inspelning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: loading,\n      children: \"Stoppa inspelning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bearbetar ljud...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }, this), responseAudio && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Bearbetat ljud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: responseAudio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioUploader, \"b7IQzWXgdBDDPaas1Zt/0QtCRQ8=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","useEffect","useRef","uploadAudio","jsxDEV","_jsxDEV","AudioUploader","_s","audioBlob","setAudioBlob","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","responseAudio","setResponseAudio","loading","setLoading","audioRef","MAX_RECORDING_TIME","recordingTimeout","setupRecorder","stream","navigator","mediaDevices","getUserMedia","audio","options","mimeType","MediaRecorder","isTypeSupported","console","warn","recorder","error","handleStartRecording","start","audioChunks","ondataavailable","event","push","data","onstop","Blob","type","handleUpload","setTimeout","handleStopRecording","state","stop","clearTimeout","blob","audioBlobResponse","audioURL","URL","createObjectURL","current","play","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","src","controls","_c","$RefreshReg$"],"sources":["/Users/hasansafiah/Desktop/projekt/git-test/Speech-AI-client/src/components/AudioUploader.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { uploadAudio } from '../client';  // Importera client.js\n\nconst AudioUploader = () => {\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [responseAudio, setResponseAudio] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const audioRef = useRef(null); // ref till audio element\n  const MAX_RECORDING_TIME = 5000; // 5 sekunder for now\n  let recordingTimeout = null;\n\n  useEffect(() => {\n    const setupRecorder = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        let options = { mimeType: 'audio/webm' };\n        if (!MediaRecorder.isTypeSupported('audio/webm')) {\n          console.warn('audio/webm stöds inte. Försöker använda audio/wav istället.');\n          options = { mimeType: 'audio/wav' }; // fallback om webm inte stöds\n        }\n\n        const recorder = new MediaRecorder(stream, options); \n        setMediaRecorder(recorder);\n      } catch (error) {\n        console.error('Fel vid åtkomst till mikrofonen:', error); \n      }\n    };\n  \n    setupRecorder();\n  }, []);\n\n  const handleStartRecording = () => {\n    if (!mediaRecorder) return;\n\n    mediaRecorder.start();\n    setIsRecording(true);\n    const audioChunks = [];\n    mediaRecorder.ondataavailable = (event) => {\n      audioChunks.push(event.data);\n    };\n\n    mediaRecorder.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n      setAudioBlob(audioBlob);\n      setIsRecording(false);\n\n      // automatiskt laddaupp filen\n      await handleUpload(audioBlob);\n    };\n\n    recordingTimeout = setTimeout(() => {\n      handleStopRecording();\n    }, MAX_RECORDING_TIME);\n  };\n\n  const handleStopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n      mediaRecorder.stop();\n      clearTimeout(recordingTimeout);\n    }\n  };\n\n  const handleUpload = async (blob) => {\n    if (!blob) {\n      console.warn(\"no audio to upload.\");\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const audioBlobResponse = await uploadAudio(blob);  // Anropa backend via client.js\n      const audioURL = URL.createObjectURL(audioBlobResponse);\n      setResponseAudio(audioURL);\n    } catch (error) {\n      console.error('Fel vid uppladdning:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // spela responsen automatiskt när det går / den är avaialble\n    if (responseAudio && audioRef.current) {\n      audioRef.current.play();\n    }\n  }, [responseAudio]); // körs varje gång `responseAudio` ändras\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h2>Spela in ett ljud</h2>\n\n      {!isRecording ? (\n        <button onClick={handleStartRecording} disabled={loading}>\n          Starta inspelning\n        </button>\n      ) : (\n        <button onClick={handleStopRecording} disabled={loading}>\n          Stoppa inspelning\n        </button>\n      )}\n\n      <br />\n      {loading && <p>Bearbetar ljud...</p>}\n\n      {responseAudio && (\n        <div>\n          <h3>Bearbetat ljud</h3>\n          <audio ref={audioRef} src={responseAudio} controls></audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}